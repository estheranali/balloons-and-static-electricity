/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;